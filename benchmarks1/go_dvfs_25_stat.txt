sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: ../sim-wattch/sim-outorder -dvfs:interval 100000 -dvfs:target_power 25 go.alpha 2 8 2stone9.in 

sim: simulation started @ Thu May 19 03:41:52 2016, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-dvfs:interval         100000 # DVFS Intervals        
-dvfs:target_power      25.0000 # DVFS TargetPower      
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **
warning: partially supported sigprocmask() call...

sim: ** simulation statistics **
sim_num_insn               24102512 # total number of instructions committed
sim_num_refs                8292441 # total number of loads and stores committed
sim_num_loads               6785929 # total number of loads committed
sim_num_stores         1506512.0000 # total number of stores committed
sim_num_branches            3395949 # total number of branches committed
sim_elapsed_time                 28 # total simulation time in seconds
sim_inst_rate           860804.0000 # simulation speed (in insts/sec)
sim_total_insn             29614739 # total number of instructions executed
sim_total_refs             10225969 # total number of loads and stores executed
sim_total_loads             8491994 # total number of loads executed
sim_total_stores       1733975.0000 # total number of stores executed
sim_total_branches          4080419 # total number of branches executed
sim_cycle                  18137368 # total simulation time in cycles
sim_IPC                      1.3289 # instructions per cycle
sim_CPI                      0.7525 # cycles per instruction
sim_exec_BW                  1.6328 # total instructions (mis-spec + committed) per cycle
sim_IPB                      7.0974 # instruction per branch
IFQ_count                  47636637 # cumulative IFQ occupancy
IFQ_fcount                 10751898 # cumulative IFQ full count
ifq_occupancy                2.6264 # avg IFQ occupancy (insn's)
ifq_rate                     1.6328 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.6085 # avg IFQ occupant latency (cycle's)
ifq_full                     0.5928 # fraction of time (cycle's) IFQ was full
RUU_count                 179083356 # cumulative RUU occupancy
RUU_fcount                  6651799 # cumulative RUU full count
ruu_occupancy                9.8737 # avg RUU occupancy (insn's)
ruu_rate                     1.6328 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  6.0471 # avg RUU occupant latency (cycle's)
ruu_full                     0.3667 # fraction of time (cycle's) RUU was full
LSQ_count                  62710284 # cumulative LSQ occupancy
LSQ_fcount                  1586121 # cumulative LSQ full count
lsq_occupancy                3.4575 # avg LSQ occupancy (insn's)
lsq_rate                     1.6328 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.1175 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0875 # fraction of time (cycle's) LSQ was full
sim_slip                  246517306 # total number of slip cycles
avg_sim_slip                10.2279 # the average slip between issue and retirement
bpred_bimod.lookups         4364170 # total number of bpred lookups
bpred_bimod.updates         3395949 # total number of updates
bpred_bimod.addr_hits       2735770 # total number of address-predicted hits
bpred_bimod.dir_hits        2822344 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           573605 # total number of misses
bpred_bimod.jr_hits          258843 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen          297600 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP        34167 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP        64781 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8056 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8311 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.8698 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.5274 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes       303124 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops       323876 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP       232819 # total number of RAS predictions used
bpred_bimod.ras_hits.PP       224676 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9650 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               32020558 # total number of accesses
il1.hits                   31546849 # total number of hits
il1.misses                   473709 # total number of misses
il1.replacements             473197 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0148 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0148 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                8848597 # total number of accesses
dl1.hits                    8663605 # total number of hits
dl1.misses                   184992 # total number of misses
dl1.replacements             184480 # total number of replacements
dl1.writebacks                55612 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0209 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0208 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0063 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 714313 # total number of accesses
ul2.hits                     661248 # total number of hits
ul2.misses                    53065 # total number of misses
ul2.replacements              48969 # total number of replacements
ul2.writebacks                 6726 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0743 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0686 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0094 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              32020558 # total number of accesses
itlb.hits                  32019730 # total number of hits
itlb.misses                     828 # total number of misses
itlb.replacements               764 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses               8980533 # total number of accesses
dtlb.hits                   8980206 # total number of hits
dtlb.misses                     327 # total number of misses
dtlb.replacements               207 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           2997256.1633 # total power usage of rename unit
bpred_power            42616254.8207 # total power usage of bpred unit
window_power           15807309.8660 # total power usage of instruction window
lsq_power              6907022.8155 # total power usage of load/store queue
regfile_power          25618416.7662 # total power usage of arch. regfile
icache_power           31186577.7884 # total power usage of icache
dcache_power           89309717.7362 # total power usage of dcache
dcache2_power          69022421.8437 # total power usage of dcache2
alu_power              135828331.5230 # total power usage of alu
falu_power             102410249.9661 # total power usage of falu
resultbus_power        16475821.0804 # total power usage of resultbus
clock_power            187146578.2243 # total power usage of clock
avg_rename_power             0.1653 # avg power usage of rename unit
avg_bpred_power              2.3496 # avg power usage of bpred unit
avg_window_power             0.8715 # avg power usage of instruction window
avg_lsq_power                0.3808 # avg power usage of lsq
avg_regfile_power            1.4125 # avg power usage of arch. regfile
avg_icache_power             1.7195 # avg power usage of icache
avg_dcache_power             4.9241 # avg power usage of dcache
avg_dcache2_power            3.8055 # avg power usage of dcache2
avg_alu_power                7.4889 # avg power usage of alu
avg_falu_power               5.6464 # avg power usage of falu
avg_resultbus_power          0.9084 # avg power usage of resultbus
avg_clock_power             10.3183 # avg power usage of clock
fetch_stage_power      73802832.6091 # total power usage of fetch stage
dispatch_stage_power   2997256.1633 # total power usage of dispatch stage
issue_stage_power      333350624.8648 # total power usage of issue stage
avg_fetch_power              4.0691 # average power of fetch unit per cycle
avg_dispatch_power           0.1653 # average power of dispatch unit per cycle
avg_issue_power             18.3792 # average power of issue unit per cycle
total_dvfs_power       456508843.6863 # dvfs total power
avg_dvfs_power_cycle        25.1695 # average dvfs power per cycle
total_dvfs_time              0.0413 # total time (DVFS)
avg_total_power_cycle       34.3443 # average total power per cycle
avg_total_power_cycle_nofp_nod2      24.8924 # average total power per cycle
avg_total_power_insn        21.0340 # average total power per insn
avg_total_power_insn_nofp_nod2      15.2452 # average total power per insn
rename_power_cc1       1731666.2633 # total power usage of rename unit_cc1
bpred_power_cc1        7166399.4241 # total power usage of bpred unit_cc1
window_power_cc1       11559935.7279 # total power usage of instruction window_cc1
lsq_power_cc1          1435048.5638 # total power usage of lsq_cc1
regfile_power_cc1      14886828.4978 # total power usage of arch. regfile_cc1
icache_power_cc1       19594640.8519 # total power usage of icache_cc1
dcache_power_cc1       31500208.7054 # total power usage of dcache_cc1
dcache2_power_cc1      2490053.9922 # total power usage of dcache2_cc1
alu_power_cc1          21016296.6908 # total power usage of alu_cc1
resultbus_power_cc1    9320433.8971 # total power usage of resultbus_cc1
clock_power_cc1        61729454.1802 # total power usage of clock_cc1
avg_rename_power_cc1         0.0955 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.3951 # avg power usage of bpred unit_cc1
avg_window_power_cc1         0.6374 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.0791 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.8208 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.0803 # avg power usage of icache_cc1
avg_dcache_power_cc1         1.7368 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.1373 # avg power usage of dcache2_cc1
avg_alu_power_cc1            1.1587 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.5139 # avg power usage of resultbus_cc1
avg_clock_power_cc1          3.4034 # avg power usage of clock_cc1
fetch_stage_power_cc1  26761040.2760 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1 1731666.2633 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  77321977.5773 # total power usage of issue stage_cc1
avg_fetch_power_cc1          1.4755 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.0955 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          4.2631 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  182430966.7945 # total power per cycle_cc1
avg_total_power_cycle_cc1      10.0583 # average total power per cycle_cc1
avg_total_power_insn_cc1       6.1601 # average total power per insn_cc1
rename_power_cc2       1223263.2776 # total power usage of rename unit_cc2
bpred_power_cc2        3994781.3677 # total power usage of bpred unit_cc2
window_power_cc2       8842015.5379 # total power usage of instruction window_cc2
lsq_power_cc2           946521.5819 # total power usage of lsq_cc2
regfile_power_cc2      3869463.0256 # total power usage of arch. regfile_cc2
icache_power_cc2       19594640.8519 # total power usage of icache_cc2
dcache_power_cc2       21782302.4184 # total power usage of dcache_cc2
dcache2_power_cc2      1359248.7874 # total power usage of dcache2_cc2
alu_power_cc2          12470355.9000 # total power usage of alu_cc2
resultbus_power_cc2    5983890.5433 # total power usage of resultbus_cc2
clock_power_cc2        41188464.7932 # total power usage of clock_cc2
avg_rename_power_cc2         0.0674 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.2203 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.4875 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0522 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.2133 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.0803 # avg power usage of icache_cc2
avg_dcache_power_cc2         1.2010 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0749 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.6876 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.3299 # avg power usage of resultbus_cc2
avg_clock_power_cc2          2.2709 # avg power usage of clock_cc2
fetch_stage_power_cc2  23589422.2196 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2 1223263.2776 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  51384334.7688 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.3006 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0674 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          2.8331 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  121254948.0848 # total power per cycle_cc2
avg_total_power_cycle_cc2       6.6854 # average total power per cycle_cc2
avg_total_power_insn_cc2       4.0944 # average total power per insn_cc2
rename_power_cc3       1349822.2676 # total power usage of rename unit_cc3
bpred_power_cc3        7543430.4346 # total power usage of bpred unit_cc3
window_power_cc3       9200165.7617 # total power usage of instruction window_cc3
lsq_power_cc3          1492541.8512 # total power usage of lsq_cc3
regfile_power_cc3      4709393.8003 # total power usage of arch. regfile_cc3
icache_power_cc3       20753834.5458 # total power usage of icache_cc3
dcache_power_cc3       27605022.4979 # total power usage of dcache_cc3
dcache2_power_cc3      8013293.6476 # total power usage of dcache2_cc3
alu_power_cc3          23951559.3836 # total power usage of alu_cc3
resultbus_power_cc3    6545893.2587 # total power usage of resultbus_cc3
clock_power_cc3        53520567.7853 # total power usage of clock_cc3
avg_rename_power_cc3         0.0744 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.4159 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.5072 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.0823 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.2597 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.1443 # avg power usage of icache_cc3
avg_dcache_power_cc3         1.5220 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4418 # avg power usage of dcache2_cc3
avg_alu_power_cc3            1.3206 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.3609 # avg power usage of resultbus_cc3
avg_clock_power_cc3          2.9508 # avg power usage of clock_cc3
fetch_stage_power_cc3  28297264.9804 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3 1349822.2676 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  76808476.4006 # total power usage of issue stage_cc3
avg_fetch_power_cc3          1.5602 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.0744 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.2348 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  164685525.2342 # total power per cycle_cc3
avg_total_power_cycle_cc3       9.0799 # average total power per cycle_cc3
avg_total_power_insn_cc3       5.5609 # average total power per insn_cc3
total_rename_access        29614739 # total number accesses of rename unit
total_bpred_access          3395949 # total number accesses of bpred unit
total_window_access       106188830 # total number accesses of instruction window
total_lsq_access            9186219 # total number accesses of load/store queue
total_regfile_access       38022356 # total number accesses of arch. regfile
total_icache_access        32048543 # total number accesses of icache
total_dcache_access         8848597 # total number accesses of dcache
total_dcache2_access         714313 # total number accesses of dcache2
total_alu_access           27076623 # total number accesses of alu
total_resultbus_access     30652785 # total number accesses of resultbus
avg_rename_access            1.6328 # avg number accesses of rename unit
avg_bpred_access             0.1872 # avg number accesses of bpred unit
avg_window_access            5.8547 # avg number accesses of instruction window
avg_lsq_access               0.5065 # avg number accesses of lsq
avg_regfile_access           2.0964 # avg number accesses of arch. regfile
avg_icache_access            1.7670 # avg number accesses of icache
avg_dcache_access            0.4879 # avg number accesses of dcache
avg_dcache2_access           0.0394 # avg number accesses of dcache2
avg_alu_access               1.4929 # avg number accesses of alu
avg_resultbus_access         1.6900 # avg number accesses of resultbus
max_rename_access                 4 # max number accesses of rename unit
max_bpred_access                  4 # max number accesses of bpred unit
max_window_access                17 # max number accesses of instruction window
max_lsq_access                    5 # max number accesses of load/store queue
max_regfile_access               12 # max number accesses of arch. regfile
max_icache_access                 4 # max number accesses of icache
max_dcache_access                 4 # max number accesses of dcache
max_dcache2_access                6 # max number accesses of dcache2
max_alu_access                    4 # max number accesses of alu
max_resultbus_access              7 # max number accesses of resultbus
max_cycle_power_cc1         49.7558 # maximum cycle power usage of cc1
max_cycle_power_cc2         27.4918 # maximum cycle power usage of cc2
max_cycle_power_cc3         30.7047 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 376832 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 612032 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120007bb0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  118 # total number of pages allocated
mem.page_mem                   944k # total size of memory pages allocated
mem.ptab_misses              264812 # total first level page table misses
mem.ptab_accesses         154594586 # total page table accesses
mem.ptab_miss_rate           0.0017 # first level page table miss rate

